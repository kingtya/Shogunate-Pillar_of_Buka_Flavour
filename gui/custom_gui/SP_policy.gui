types sp_types { # 作为一个类型名，没有实际意义

    type sp_button_tab = widget {
        name = "sp_button_tab"  # 窗口名，该名称会被用于初始创建窗口 一般与类型名相同即可
        visible = no
        
        parentanchor = top|right # 父锚点，即锚点在父窗口的位置
        position = { 0 525 } # 位置
        layer = hud_layer
		size = { 50 0 }
        allow_outside = yes

        using = Animation_ShowHide_Quick # 可以不是一个完整的类型，甚至可以只是一句代码
        
        vbox = {
			alwaystransparent = no
			filter_mouse = all
			visible = "[Not(IsGameViewOpen('barbershop'))]"
			margin = { 5 10 }

            Background = {
				visible = "[And(Not(IsRightWindowOpen) , Not(IsGameViewOpen('barbershop')) )]"
				texture = "gfx/interface/skinned/hud_maintab_bg_middle.dds"
				spriteType = CorneredTiled
				texture_density =  2
				margin = { 0 -20 }
			}

            Background = {
				visible = "[And(Not(IsRightWindowOpen) , Not(IsGameViewOpen('barbershop')) )]"
				spriteType = CorneredStretched
				spriteborder_bottom = 100
				parentanchor = top|right
				texture_density = 2
				size = { 50 100 }
				texture = "gfx/interface/skinned/hud_maintab_bg_bottom.dds"
                margin = { 0 25 }
			}

            widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 30 }

				icon = {
					visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode))]"
					parentanchor = right|vcenter
					texture = "gfx/interface/skinned/hud_spike_big.dds"
					size = { 25 15 }
                    position = { 0 10 }

					using = Animation_ShowHide_Standard
				}
			}

            vbox = {
                state = {
                    name = _show
                    alpha = 1
                    duration = 0.1
                    using = Animation_Curve_Default
                }

                state = {
                    name = _hide
                    duration = 0.6
                    alpha = 0
                    using = Animation_Curve_Default
                }

                widget_hud_main_tab = {

                    blockoverride "maintab_button"
                    {
                        texture = "gfx/interface/skinned/hud_maintab/maintab_my_policy.dds"
                        shortcut = "army_merge"
                        onclick = "[GetScriptedGui('sp_init_flag_list').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                        onclick = "[GetVariableSystem.Toggle( 'show_sp_window' )]"
                        tooltip = sp_tab_my_policies_tt
                        down = "[GetVariableSystem.HasValue( 'show_sp_window', 'true' )]"
                    }
                }
            }
        }
    }
    type sp_button_tab_window = sp_button_tab {
        name = "sp_button_tab_window"
        
        visible = "[And( Not(GetPlayer.GetTopLiege.GetGovernment.HasRule( 'administrative' )) , And(And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode)), Not(IsGameViewOpen('struggle'))))]"
    }
    type sp_button_tab_window_admin = sp_button_tab {
        name = "sp_button_tab_window_admin"

        position = { 0 570 } # 位置
        visible = "[And( GetPlayer.GetTopLiege.GetGovernment.HasRule( 'administrative' ) , And(And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode)), Not(IsGameViewOpen('struggle'))))]"
    }

    type sp_policy_window = window {
        name = "sp_policy_window"
        allow_outside = yes
        position = { 0 0 }
        movable = yes
        parentanchor = center
        layer = middle
        size = { 1300 1000 }
        using = Window_Background
        using = Window_Decoration_Spike


        visible = "[And(GetVariableSystem.HasValue( 'show_sp_window', 'true' ),GetPlayer.IsValid)]"

        # 窗口关闭时候播放动画和声音，这些都是原版模版
        state = {
            name = _show
            using = Animation_FadeIn_Quick
            using = Sound_WindowShow_Standard
            on_start = "[ToggleGameViewData('council_window', GetPlayer.GetID)]" # 获取内阁窗口数据
        }
        state = {
            name = _hide
            using = Animation_FadeOut_Quick
            using = Sound_WindowHide_Standard
            on_start = "[GetScriptedGui('sp_exit_flag_list').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        }

        vbox = {
            using = Window_Margins

            background = {
                #visible = "[Character.GetGovernment.IsType('feudal_government')]"
                texture = "gfx/interface/skinned/hud_maintab/policy_background.dds"
                alpha = 1
				spriteborder = { 1 1 }
				margin = { -30 -10 }
                modify_texture = {
                    texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
                    blend_mode = alphamultiply
                    mirror = vertical
                }
                modify_texture = {
                    texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
                    blend_mode = alphamultiply
                }
            }

            header_pattern = { # 一个标题栏， 你可以把标题和退出按钮包含到标题栏中
                layoutpolicy_horizontal = expanding
                blockoverride "button_close"
                {
                    onclick = "[GetVariableSystem.Toggle( 'show_sp_window' )]"
                }

                blockoverride "header_text"
                {
                    text = sp_policy_window_head_text # 标题文本 此处可以直接写中文文字，或者写本地化键
                }
            }

            vbox = {
                layoutpolicy_horizontal = expanding # 保证横向填充
                layoutpolicy_vertical = expanding

                hbox = { # 标题栏
                    layoutpolicy_horizontal = expanding # 保证横向填充
                    layoutpolicy_vertical = expanding
                    maximumsize = { 1300 12 }
                    button_tab = {
                        layoutpolicy_horizontal = expanding # 保证横向填充
                        layoutpolicy_vertical = expanding
                        hbox = {
                            text_single = {
                                layoutpolicy_horizontal = expanding
                                align = center
                                text = "sp_policy_type_general_header_text"
                                default_format = "#low"
                            }
                            text_single = {
                                align = center
                                text = "24"
                                default_format = "#low"
                                margin_right = 15
                                min_width = 30

                                using = Animation_Character_Window_Refresh
                            }
                        }
                        onclick = "[GetVariableSystem.Set( 'sp_show_policy_type_button_tab', 'general' )]"
                        down = "[Or( Not( GetVariableSystem.Exists('sp_show_policy_type_button_tab') ), GetVariableSystem.HasValue( 'sp_show_policy_type_button_tab', 'general' ))]"
                    }
                    button_tab = {
                        layoutpolicy_horizontal = expanding # 保证横向填充
                        layoutpolicy_vertical = expanding
                        hbox = {
                            text_single = {
                                layoutpolicy_horizontal = expanding
                                align = center
                                text = "sp_policy_type_special_header_text"
                                default_format = "#low"
                            }
                            text_single = {
                                align = center
                                text = "15"
                                default_format = "#low"
                                margin_right = 15
                                min_width = 30

                                using = Animation_Character_Window_Refresh
                            }
                        }
                        onclick = "[GetVariableSystem.Set( 'sp_show_policy_type_button_tab', 'special' )]"
                        down = "[GetVariableSystem.HasValue( 'sp_show_policy_type_button_tab', 'special' )]"
                    }
                }

                scrollbox = {
                    layoutpolicy_horizontal = expanding # 保证横向填充
                    layoutpolicy_vertical = expanding
                    blockoverride "scrollbox_content" {
                        vbox = { # 政策分类
                            layoutpolicy_horizontal = expanding # 保证横向填充
                            sp_policy_list = {}
                            sp_policy_list = {
                                blockoverride "sp_policy_list_button" {
                                    button_expandable_toggle_field = {
                                        blockoverride "text"
                                        {
                                            text = "sp_policy_type_neu"
                                        }
                                    }
                                }
                                blockoverride "sp_policy_items" {
                                    datamodel = "[GetPlayer.MakeScope.GetList('sp_neutral_policy_flags')]"
                                }
                            }
                            sp_policy_list = {
                                blockoverride "sp_policy_list_button" {
                                    button_expandable_toggle_field = {
                                        blockoverride "text"
                                        {
                                            text = "sp_policy_type_pro"
                                        }
                                    }
                                }
                                blockoverride "sp_policy_items" {
                                    datamodel = "[GetPlayer.MakeScope.GetList('sp_progressive_policy_flags')]"
                                }
                            }
                            sp_policy_list = {
                                visible = "[GetVariableSystem.HasValue( 'sp_show_policy_type_button_tab', 'special' )]"
                                blockoverride "sp_policy_list_button" {
                                    button_expandable_toggle_field = {
                                        blockoverride "text"
                                        {
                                            text = "sp_policy_type_spe"
                                        }
                                    }
                                }
                                blockoverride "sp_policy_items" {
                                    datamodel = "[GetPlayer.MakeScope.GetList('sp_special_policy_flags')]"
                                }
                            }
                        }
                    }
                    blockoverride "scrollbox_margins"
					{
                        margin_right = 10
					}
                }
                

                expand = {}
                
            
            }

            hbox = { # 政策信息栏
                layoutpolicy_horizontal = expanding # 保证横向填充
                #layoutpolicy_vertical = preferred
                #size = { 100% 40% }
                ################
                ### 人物详情 ###
                ################
                vbox = {
                    layoutpolicy_horizontal = expanding # 保证横向填充
                    layoutpolicy_vertical = expanding
                    background = {
                        using = Background_Area
                        margin = { -15 -15 }
                    }
                    scrollbox = {
                        #size = { 0 250 }
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        
                        blockoverride "scrollbox_content" {
                            hbox = {
                                margin = { 0 15 }
                            }
                            widget_councillor_item = {
                                size = { 260 250 }
                                visible = "[AccessCouncilWindow.IsPlayerCouncilShown)]"
                                #layoutpolicy_horizontal = expanding
                                layoutpolicy_vertical = expanding
                                datacontext = "[AccessCouncilWindow]" # 利用 AccessCouncilWindow 可以使得当前窗口获取内阁窗口所需数据 此为p社所留接口
                                datacontext = "[CouncilWindow.GetCouncillor('councillor_spt_bugyo')]" # councillor_steward即为内阁职位，可以是其他职位
                                datacontext = "[GuiCouncilPosition.GetActiveCouncilTask]"
                                datacontext = "[ActiveCouncilTask.GetPositionType]"
                                datacontext = "[ActiveCouncilTask.GetCouncillor]"
            
                                background =  { # 背景
                                    texture = "gfx/interface/skinned/illustrations/council/bg_council_steward.dds"
                                    fittype = centercrop
                                    using = Mask_Rough_Edges
                                    alpha = 0.7
                                }
            
                                background = { # 背景
                                    texture = "gfx/interface/component_masks/mask_vignette.dds"
                                    color = { 0.15 0.15 0.15 1 }
                                    alpha = 0.3
                                }
                            }
                            hbox = {
                                background = {
                                    using = Background_Area
                                    margin = { 0 -15 }
                                }
                                spacing = 5
                                margin = { 10 10 }
                                icon = {
                                    name = "icon_policy_point"
                                    size = { 30 30 }
                                    texture = "gfx/interface/icons/symbols/icon_policy_point.dds"
                                }

                                text_single = {
                                    text = sp_current_policy_points
                                    using = Font_Size_Medium
                                }
                            }
                            
                        }
                    }
                }

                vbox = {
                    layoutpolicy_horizontal = expanding # 保证横向填充
                    layoutpolicy_vertical = expanding

                    vbox = {
                        layoutpolicy_horizontal = expanding # 保证横向填充
                        layoutpolicy_vertical = expanding
                        ################
                        ### 政策效果 ###
                        ################
                        hbox = {
                            layoutpolicy_horizontal = expanding
                            margin = { 0 0 }
                            
                            text_label_center = {
                                text = sp_effect_header_text
                            }
                        }
                        vbox = {
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding
                            margin = { 10 5 }
                            background = {
                                using = Background_Area
                                margin = { -15 -15 }
                            }
                            scrollbox = {
                                layoutpolicy_horizontal = preferred
                                layoutpolicy_vertical = expanding
                                size = { 0 182 }
                                blockoverride "scrollbox_content" {
                                    hbox = {
                                        margin = { 0 -6 }
                                        layoutpolicy_horizontal = expanding
                                        text_multi = {
                                            autoresize = yes
                                            multiline = yes
                                            using = Font_Size_Medium
                                            max_width = 765
                                            text = "[GetScriptedGui('sp_apply_modifier').BuildTooltip( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End )]"
                                        }
                                        hbox = {
                                           layoutpolicy_horizontal = expanding
                                        }
                                    }
                                }
                            }
                        }
                                    
                        ################
                        ### 政策费用 ###
                        ################
                        hbox = {
                            layoutpolicy_horizontal = expanding
                            margin = { 0 0 }
                            
                            text_label_center = {
                                text = sp_cost_header_text
                            }
                        }
                        vbox = {
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding
                            margin = { 10 5 }
                            background = {
                                using = Background_Area
                                margin = { -15 -15 }
                            }
                            scrollbox = {
                                layoutpolicy_horizontal = preferred
                                layoutpolicy_vertical = expanding
                                size = { 0 74 }
                                blockoverride "scrollbox_content" {
                                    hbox = {
                                        margin = { 0 -6 }
                                        layoutpolicy_horizontal = expanding
                                        text_multi = {
                                            autoresize = yes
                                            using = Font_Size_Medium
                                            max_width = 765
                                            text = "[GetScriptedGui('sp_apply_cost').BuildTooltip( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End )]"
                                        }
                                        hbox = {
                                           layoutpolicy_horizontal = expanding
                                        }
                                    }
                                }
                            }
                        }
                    }
                    hbox = {
                        layoutpolicy_horizontal = expanding # 保证横向填充
                        layoutpolicy_vertical = expanding
                        button_primary_big = {
                            text_single = {
                                layoutpolicy_horizontal = expanding
                                text = sp_confirm_button_text
	    	                    parentanchor = center
	    	                    position = {0 -3 }
                            }

                            tooltip = "[GetScriptedGui('sp_can_apply_modifier').IsValidTooltip( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End )]"
                            tooltip_visible = "[Not(GetScriptedGui('sp_can_apply_modifier').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"

                            enabled = "[GetScriptedGui('sp_can_apply_modifier').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End)]"
    
                            onclick = "[GetScriptedGui('sp_apply_modifier').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End)]"
                            onclick = "[GetScriptedGui('sp_apply_cost').Execute( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End )]"
                        }
                        button_primary_big = {
                            text_single = {
                                layoutpolicy_horizontal = expanding
                                text = sp_remove_button_text
	    	                    parentanchor = center
	    	                    position = {0 -3 }
                            }
                            enabled = "[GetScriptedGui('sp_can_remove_modifier').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End)]"
                            tooltip = "[GetScriptedGui('sp_can_remove_modifier').IsValidTooltip( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End )]"
                            tooltip_visible = "[Not(GetScriptedGui('sp_can_remove_modifier').IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
                            
                            onclick = "[GetScriptedGui('sp_remove_modifier').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(GetVariableSystem.Get('selected_flag'))).End)]"
                        }
                    }
                    
                }

                #expand = {}
            }

            expand = {}

        }
    }

    type sp_flag_info_button = button_letter {
        size = { 240 65 }

        hbox = {
            spacer = { size = { 15 0 } }
            icon = {
                size = { 30 30 }
                visible = "[GetScriptedGui('sp_is_released_sg').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(Scope.GetFlagName)).End)]"
                texture = "gfx/interface/icons/activities/activity_adult_education_header.dds"
            }
            expand = {}
            icon = {
                size = { 30 30 }
                texture = "gfx/interface/icons/symbols/icon_policy_point.dds"
            }
            spacer = { size = { 45 0 } }
        }
        text_multi = {
            text = "[Localize(Concatenate(Scope.GetFlagName, '_name'))]"
            default_format = "#light_background"
            parentanchor = left|vcenter
            max_width = 120
            autoresize = yes
            position = { 45 0 }
        }
        text_single = {
            text = "[GuiScope.SetRoot(MakeScopeFlag(Scope.GetFlagName)).AddScope('introducer', GetPlayer.MakeScope).ScriptValue('sp_policy_points')|0]"
            default_format = "bold"
            parentanchor = center
            position = { 90 -3 }
        }

        tooltip = "[Localize(Concatenate(Scope.GetFlagName, '_desc'))]"

        down = "[EqualTo_string(Scope.GetFlagName, GetVariableSystem.Get('selected_flag'))]"
        onclick = "[GetVariableSystem.Set('selected_flag', Scope.GetFlagName)]"
        onclick = "[GetScriptedGui('sp_count_points_sg').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sp_selected_flag', MakeScopeFlag(Scope.GetFlagName)).End)]"
    }

    type sp_policy_list = vbox {
        visible = "[Or( Not( GetVariableSystem.Exists('sp_show_policy_type_button_tab') ), GetVariableSystem.HasValue( 'sp_show_policy_type_button_tab', 'general' ))]"
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding

        oncreate = "[BindFoldOutContext]"
        oncreate = "[PdxGuiFoldOut.Unfold]"
        
        block "sp_policy_list_button" {
            button_expandable_toggle_field = {
                blockoverride "text"
                {
                    text = "sp_policy_type_con"
                }
            }
        }

        vbox = {
            visible = "[PdxGuiFoldOut.IsUnfolded]"

            layoutpolicy_horizontal = expanding
            
            vbox = {
                layoutpolicy_horizontal = expanding # 保证横向填充
                size = { 100% 125 }
                dynamicgridbox = {
                    block "sp_policy_items" {
                        datamodel = "[GetPlayer.MakeScope.GetList('sp_conservative_policy_flags')]"
                    }
                    
                    flipdirection = yes
                    ignoreinvisible = yes
                    maxhorizontalslots = 5
                    datamodel_wrap = 5

                    item = {
                        sp_flag_info_button = {}
                    }
                }
            }
        }
    }

}

# 实例化类型对象，只有实例化后才能在scripted_widgets中被使用
sp_button_tab_window = {}
sp_button_tab_window_admin = {}
sp_policy_window = {}