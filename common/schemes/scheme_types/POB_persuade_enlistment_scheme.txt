pob_persuade_enlistment = {
	# Basic Setup
	skill = diplomacy
	desc = pob_persuade_enlistment_desc_general
	success_desc = "BEFRIEND_SUCCESS_DESC"

	icon = diplomacy
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	category = personal
	target_type = character
	is_secret = yes
	is_basic = yes
	cooldown = { 
		years = 3
	}

	# Parameters
	speed_per_skill_point = -2.5
	spymaster_speed_per_skill_point = 0	
	uses_resistance = yes
	base_progress_goal = 170
	maximum_breaches = 1
	base_maximum_success = 95
	minimum_success = 5
	
	# Core Triggers
	allow = {
		is_adult = yes
		is_imprisoned = no
		scope:target = {
			is_adult = yes
			is_imprisoned = no
		}
		pob_has_any_running_task_scheme = no
	}

	valid = {
		is_imprisoned = no
		is_incapable = no
		scope:target = {
			is_imprisoned = no
			is_incapable = no
			exists = location
			in_diplomatic_range = scope:owner
		}
	}

	use_secrecy = {
		scope:target = {
			exists = liege
		}
	}

	odds_prediction = {
		add = pob_persuade_enlistment_odds_value
		min = 0
	}

	pulse_actions = {
		entries = {
		}
		chance_of_no_event = scheme_apa_chance_of_no_event_value
	}

	# Base Chances
	base_success_chance = {
		base = 5
		
		modifier = {
			add = {
				value = scope:owner.diplomacy
			 	multiply = 1.5
			}
			desc = SCHEME_YOUR_DIPLOMACY
		}

		modifier = {
			add = {
				value = scope:owner.intrigue
				multiply = 0.5
			}
			desc = SCHEME_YOUR_INTRIGUE
		}

		opinion_modifier = {
 			trigger = {
				scope:target = {
					exists = liege
 					is_courtier_of = liege
				}
 			}
			who = scope:target
 			opinion_target = scope:target.liege
 			multiplier = -0.5
 			max = 50
 		}

		opinion_modifier = {
			who = scope:target
			opinion_target = scope:owner
			multiplier = 0.5
 			max = 50
		}

		apply_opportunistic_scheme_success_chance_adjustments_modifier = yes
		
		# Current roles
		modifier = {
			scope:target = {
				is_knight = yes
			}
			add = -10
			desc = SP_AI_MY_LIEGES_KNIGHT
		}

		modifier = {
			scope:target = {
				is_commanding_army = yes
			}
			add = -15
			desc = SP_AI_MY_LIEGES_COMMANDER
		}

		modifier = {
			scope:target = {
				is_councillor = yes
			}
			add = -20
			desc = SP_AI_ON_THE_COUNCIL
		}

		modifier = {
			scope:target = { 
				has_any_court_position = yes 
			}         
			add = -20
			desc = SP_AI_COURT_PHYSICIAN
		}

		#Relations & relatives (with actor)
		modifier = {
			scope:target = {
				has_relation_lover = scope:owner
			}
			add = 50
			desc = SP_AI_YOUR_LOVER
		}

		modifier = {
			scope:target = {
				has_relation_friend = scope:owner
			}
			add = 37
			desc = SP_AI_YOUR_FRIEND
		}

		modifier = {
			scope:target = {
				this.dynasty.dynast = scope:owner
			}
			add = 15
			desc = SP_AI_YOU_ARE_THE_DYNAST
		}

		modifier = {
			scope:target = {
				this.house.house_head = scope:owner
			}
			add = 30
			desc = SP_AI_YOU_ARE_THE_HOUSE_HEAD
		}
		
		modifier = {
			scope:target = {
				NOT = { is_child_of = scope:owner }
				NOT = { is_close_family_of = scope:owner }
				is_extended_family_of = scope:owner
			}
			add = 15
			desc = SP_AI_YOUR_RELATIVE
		}

		modifier = {
			scope:target = {
				is_close_family_of = scope:owner
			}
			add = 37
			desc = SP_AI_YOUR_RELATIVE
		}

		modifier = {
			scope:target = {
				is_spouse_of = scope:owner
			}
			add = 40
			desc = SP_AI_YOUR_SPOUSE
		}

		#Relations & relatives (with host)
		modifier = {
			scope:target = {
				exists = liege
				has_relation_lover = liege
			}
			add = -50
			desc = SP_AI_THEIR_LOVER
		}

		modifier = {
			scope:target = {
				exists = liege
				has_relation_friend = liege
			}
			add = -37
			desc = SP_AI_THEIR_FRIEND
		}

		modifier = {
			scope:target = {
				exists = liege
				is_child_of = liege
			}
			add = -80
			desc = SP_AI_THEIR_CHILD
		}

		modifier = {
			scope:target = {
				exists = liege
				NOT = { is_child_of = liege }
				is_close_family_of = liege
			}
			add = -37
			desc = SP_AI_THEIR_RELATIVE
		}

		# 强牵制
		modifier = {
			scope:target = {
				exists = liege
				liege = {
					has_strong_hook = prev
				}
			}
			add = -50
			desc = POB_SCHEME_STRONG_HOOK_PENALTY
		}

		# 忠信
		modifier = {
			scope:target = {
				exists = liege
				has_trait = loyal
			}
			add = -50
			desc = POB_SCHEME_TARGET_LOYAL
		}

		# Family (at location)
		modifier = {
			scope:target = {
				exists = location
				any_consort_not_in_traveling_family_trigger = yes
			}
			desc = SP_AI_LEAVING_MY_SPOUSE
			add = -50
		}

		modifier = {
			scope:target = {
				exists = location
				any_child_not_in_traveling_family_trigger = yes
			}
			desc = SP_AI_LEAVING_MY_CHILD
			add = -50
		}

		modifier = {
			add = -25
			desc = SP_AI_MARRIED_MATRILINIALLY
			scope:target = {
				is_married = yes
				is_male = yes
				any_spouse = {
					matrilinear_marriage = yes
					host = scope:target.host
				}
			}
		}

		modifier = {
			add = -25
			desc = SP_AI_MARRIED_PATRILINIALLY
			scope:target = {
				is_married = yes
				is_female = yes
				any_spouse = {
					patrilinear_marriage = yes
					host = scope:target.host
				}
			}
		}

		# 灵感
		modifier = {
			scope:target = {
				exists = inspiration
				inspiration = {
					NOT = {
						exists = inspiration_sponsor
					}
				}
			}
			add = -25
			desc = SP_AI_INSPIRED
		}

		modifier = {
			scope:target = {
				exists = inspiration
				inspiration = {
					exists = inspiration_sponsor
				}
			}
			add = -125
			desc = SP_AI_SPONSORED_INSPIRATION
		}

		# 家族团结度
		modifier = {
 			add = {
				value = scope:owner.house.house_unity_value
				multiply = 0.25
			}
 			desc = SP_AI_HOUSE_UNITY
			exists = scope:owner.house
			scope:target = {
				exists = house
				house = scope:owner.house
				house = {
					OR = {
						has_house_unity_stage = harmonious
						has_house_unity_stage = friendly
					}
				}
			}
 		}

	}
	
	base_secrecy = {
		add = secrecy_base_value
		add = countermeasure_apply_secrecy_maluses_value
	}

	# On Actions
	on_start = {
		set_variable = {
			name = apply_countermeasures
			value = flag:opportunistic
		}
	}

	on_phase_completed = {
		save_scope_as = scheme
		scheme_target_character = { save_scope_as = target }
		scheme_owner = { save_scope_as = owner }
		scope:scheme.scheme_owner = {
			trigger_event = pob_persuade_enlistment_events.0002
		}
	}

	on_invalidated = {
		scheme_target_character = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		scope:owner = {
			# Invalidation due to war.
			if = {
				limit = { is_at_war_with = scope:target }
				scope:owner = {
					send_interface_toast = {
						title = pob_persuade_enlistment_invalidated_title
						left_icon = scope:target
						custom_tooltip = pob_persuade_enlistment_invalidated_war
					}
				}
			}

			# Invalidation due to death
			if = {
				limit = {
					scope:target = { is_alive = no }
				}
				scope:owner = {
					send_interface_toast = {
						title = pob_persuade_enlistment_invalidated_title
						left_icon = scope:target
						custom_tooltip = pob_persuade_enlistment_invalidated_dead
					}
				}
			}
		}

		if = {
			limit = {
				scope:target = { 
					NOT = { in_diplomatic_range = scope:owner } 
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = pob_persuade_enlistment_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_not_in_diplomatic_range
					}
				}
			}
		}
	}

	on_monthly = {
		hostile_scheme_monthly_discovery_chance_effect = yes
	}
}
